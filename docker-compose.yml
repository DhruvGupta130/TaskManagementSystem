services:

  # PostgreSQL Instances
  postgres-auth:
    image: postgres:latest
    container_name: postgres-auth
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: task
    volumes:
      - pgdata-auth:/var/lib/postgresql/data
    restart: unless-stopped
    networks: [ backend ]

  postgres-task:
    image: postgres:latest
    container_name: postgres-task
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: task
    volumes:
      - pgdata-task:/var/lib/postgresql/data
    restart: unless-stopped
    networks: [ backend ]

  postgres-comment:
    image: postgres:latest
    container_name: postgres-comment
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: task
    volumes:
      - pgdata-comment:/var/lib/postgresql/data
    restart: unless-stopped
    networks: [ backend ]

  postgres-notification:
    image: postgres:latest
    container_name: postgres-notification
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: task
    volumes:
      - pgdata-notification:/var/lib/postgresql/data
    restart: unless-stopped
    networks: [ backend ]

  # Kafka + Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: [ "2181:2181" ]
    restart: unless-stopped
    networks: [ backend ]

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on: [ zookeeper ]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports: [ "9092:9092", "29092:29092" ]
    restart: unless-stopped
    networks: [ backend ]

  #Redis Instance
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    ports: [ "6379:6379" ]
    volumes:
      - redis-data:/data
    networks: [ backend ]

  # Core Services
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports: [ "8761:8761" ]
    restart: unless-stopped
    networks: [ backend ]

  admin-server:
    build: ./admin-server
    container_name: admin-server
    ports: [ "9090:9090" ]
    depends_on: [ eureka-server ]
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka
    restart: unless-stopped
    networks: [ backend ]

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports: [ "8080:8080" ]
    depends_on: [ admin-server, auth-service, user-service, task-service, comment-service, notification-service ]
    environment:
      ADMIN_URL: http://admin-server:9090
      GATEWAY_SERVICE_URL: http://api-gateway:8080
      FRONTEND_URL: http://localhost:5173
      JWKS_URI: http://auth-service:8085/auth/.well-known/jwks.json
      EUREKA_URL: http://eureka-server:8761/eureka
    restart: unless-stopped
    networks: [ backend ]

  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports: [ "8085:8085" ]
    depends_on: [ postgres-auth, admin-server, redis ]
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/task
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: root
      ADMIN_URL: http://admin-server:9090
      AUTH_SERVICE_URL: http://auth-service:8085
      EUREKA_URL: http://eureka-server:8761/eureka
      REDIS_HOST: redis
      REDIS_PORT: 6379
    restart: unless-stopped
    networks: [ backend ]

  user-service:
    build: ./user-service
    container_name: user-service
    ports: [ "8081:8081" ]
    depends_on: [ auth-service ]
    environment:
      ADMIN_URL: http://admin-server:9090
      USER_SERVICE_URL: http://user-service:8081
      JWKS_URI: http://auth-service:8085/auth/.well-known/jwks.json
      EUREKA_URL: http://eureka-server:8761/eureka
    restart: unless-stopped
    networks: [ backend ]

  task-service:
    build: ./task-service
    container_name: task-service
    ports: [ "8082:8082" ]
    depends_on: [ postgres-task, kafka, auth-service, redis ]
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres-task:5432/task
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: root
      ADMIN_URL: http://admin-server:9090
      TASK_SERVICE_URL: http://task-service:8082
      JWKS_URI: http://auth-service:8085/auth/.well-known/jwks.json
      EUREKA_URL: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    restart: unless-stopped
    networks: [ backend ]

  comment-service:
    build: ./comment-service
    container_name: comment-service
    ports: [ "8084:8084" ]
    depends_on: [ postgres-comment, auth-service, redis ]
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres-comment:5432/task
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: root
      ADMIN_URL: http://admin-server:9090
      COMMENT_SERVICE_URL: http://comment-service:8084
      JWKS_URI: http://auth-service:8085/auth/.well-known/jwks.json
      EUREKA_URL: http://eureka-server:8761/eureka
      REDIS_HOST: redis
      REDIS_PORT: 6379
    restart: unless-stopped
    networks: [ backend ]

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports: [ "8083:8083" ]
    depends_on: [ postgres-notification, kafka, auth-service ]
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres-notification:5432/task
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: root
      ADMIN_URL: http://admin-server:9090
      NOTIFICATION_SERVICE_URL: http://notification-service:8083
      JWKS_URI: http://auth-service:8085/auth/.well-known/jwks.json
      EUREKA_URL: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    restart: unless-stopped
    networks: [ backend ]

  react-app:
    build: ./react-app
    container_name: react-app
    environment:
      VITE_BACKEND_URL: http://localhost:8080
    ports: [ "5173:5173" ]
    depends_on: [ api-gateway ]
    restart: unless-stopped
    networks: [ backend ]

networks:
  backend:
    driver: bridge

volumes:
  pgdata-auth:
  pgdata-task:
  pgdata-comment:
  pgdata-notification:
  redis-data:
